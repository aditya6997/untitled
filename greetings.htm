<!DOCTYPE html>
<html lang="en">
<!-- Previous head and style sections remain the same -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Happy Diwali</title>
    <link href="https://fonts.googleapis.com/css2?family=Italianno&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
            font-family: 'Roboto', sans-serif;
            overflow: hidden;
            height: 100vh;
            height: 100dvh;
            color: #fff;
            touch-action: none;
        }
        canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 1;
        }
        /* Rest of the styles remain the same */
        .content {
            position: relative;
            z-index: 2;
            height: 100vh;
            height: 100dvh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            gap: max(2rem, 4vh);
            padding: 1rem;
        }
        .greeting {
            text-align: center;
            animation: float 3s ease-in-out infinite;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
        }
        .header {
            display: flex;
            align-items: center;
            gap: clamp(10px, 2vw, 20px);
        }
        h1 {
            font-size: clamp(2.5rem, 10vw, 4rem);
            font-family: 'Italianno', cursive;
            background: linear-gradient(45deg, #FFA500, #FF4500, #FFD700);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(255,165,0,0.5);
            padding: 0 10px;
            white-space: nowrap;
        }
        h2 {
            font-size: clamp(2rem, 8vw, 3.5rem);
            font-family: 'Italianno', cursive;
            background: linear-gradient(45deg, #FFA500, #FF4500, #FFD700);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(255,165,0,0.5);
            display: none;
        }
        .diya {
            font-size: clamp(2rem, 8vw, 3rem);
            filter: drop-shadow(0 0 10px #FF8C00);
            animation: flicker 1.5s ease-in-out infinite alternate;
        }
        .share-container {
            width: min(90%, 400px);
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        input {
            width: 100%;
            background: rgba(255,255,255,0.1);
            border: none;
            padding: 1rem;
            border-radius: 12px;
            color: white;
            font-size: 1rem;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        input:focus {
            outline: none;
            background: rgba(255,255,255,0.15);
        }
        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
        }
        button {
            background: linear-gradient(45deg, #FFA500, #FF4500);
            border: none;
            padding: 1rem;
            border-radius: 12px;
            color: white;
            font-weight: bold;
            font-size: 1rem;
            cursor: pointer;
            transition: transform 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        button:active {
            transform: scale(0.98);
        }
        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        @keyframes flicker {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }
        @media (hover: hover) {
            button:hover {
                transform: translateY(-2px);
            }
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    <div class="content">
        <div class="greeting">
            <div class="header">
                <div class="diya">ðŸª”</div>
                <h1>Happy Diwali!</h1>
                <div class="diya">ðŸª”</div>
            </div>
            <h2 id="nameText"></h2>
        </div>
        <div class="share-container">
            <input type="text" id="nameInput" placeholder="Enter name to share wishes">
            <div class="button-group">
                <button onclick="handleShare()">
                    Share
                    <span>âœ¨</span>
                </button>
                <button onclick="handleCopy()">
                    Copy Link
                    <span>ðŸ“‹</span>
                </button>
            </div>
        </div>
    </div>

    <script>
        class FireworkCanvas {
            constructor() {
                this.canvas = document.getElementById('canvas');
                this.ctx = this.canvas.getContext('2d');
                this.particles = [];
                this.fireworks = [];
                this.lastFirework = 0;
                this.fireworkInterval = 1200;
                this.dpr = window.devicePixelRatio || 1;
                this.setupCanvas();
                this.animate();
                window.addEventListener('resize', () => this.setupCanvas());
            }

            setupCanvas() {
                this.dpr = window.devicePixelRatio || 1;
                this.canvas.width = window.innerWidth * this.dpr;
                this.canvas.height = window.innerHeight * this.dpr;
                this.ctx.scale(this.dpr, this.dpr);
                this.width = window.innerWidth;
                this.height = window.innerHeight;
            }

            createFirework() {
                const x = Math.random() * this.width;
                const targetY = this.height * (0.2 + Math.random() * 0.4); // Targets middle 40% of screen
                this.fireworks.push({
                    x,
                    y: this.height,
                    targetY,
                    vel: 4 + Math.random() * 3,
                    size: 2,
                    color: `hsl(${30 + Math.random() * 20}, 100%, 50%)`
                });
            }

            createParticles(x, y) {
                const particleCount = Math.min(20, window.innerWidth < 480 ? 12 : 20);
                const hue = Math.random() * 360;
                const spread = Math.PI * 2;
                
                for (let i = 0; i < particleCount; i++) {
                    const angle = (spread * i) / particleCount;
                    const velocity = 2 + Math.random() * 2;
                    
                    this.particles.push({
                        x,
                        y,
                        vx: Math.cos(angle) * velocity,
                        vy: Math.sin(angle) * velocity,
                        size: 1 + Math.random(),
                        color: `hsl(${hue}, 100%, 50%)`,
                        life: 50 + Math.random() * 30,
                        maxLife: 80
                    });
                }
            }

            animate(time = 0) {
                requestAnimationFrame((t) => this.animate(t));
                
                // Clear with fade effect
                this.ctx.fillStyle = 'rgba(0,0,0,0.1)';
                this.ctx.fillRect(0, 0, this.width, this.height);

                // Create new fireworks
                if (time - this.lastFirework > this.fireworkInterval) {
                    this.createFirework();
                    this.lastFirework = time;
                }

                // Update and draw fireworks
                for (let i = this.fireworks.length - 1; i >= 0; i--) {
                    const fw = this.fireworks[i];
                    fw.y -= fw.vel;

                    if (fw.y <= fw.targetY) {
                        this.createParticles(fw.x, fw.y);
                        this.fireworks.splice(i, 1);
                        continue;
                    }

                    this.ctx.beginPath();
                    this.ctx.arc(fw.x, fw.y, fw.size, 0, Math.PI * 2);
                    this.ctx.fillStyle = fw.color;
                    this.ctx.fill();
                }

                // Update and draw particles
                for (let i = this.particles.length - 1; i >= 0; i--) {
                    const p = this.particles[i];
                    p.x += p.vx;
                    p.y += p.vy;
                    p.vy += 0.15; // Gravity
                    p.life--;

                    if (p.life <= 0) {
                        this.particles.splice(i, 1);
                        continue;
                    }

                    const alpha = p.life / p.maxLife;
                    this.ctx.beginPath();
                    this.ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
                    this.ctx.fillStyle = p.color.replace(')', `,${alpha})`);
                    this.ctx.fill();
                }
            }
        }

        // Initialize the fireworks
        new FireworkCanvas();

        // Rest of the JavaScript remains the same
        function updateNameDisplay() {
            const params = new URLSearchParams(window.location.search);
            const name = params.get('name');
            const nameElement = document.getElementById('nameText');
            if (name) {
                nameElement.textContent = name;
                nameElement.style.display = 'block';
            }
        }

        async function handleShare() {
            const name = document.getElementById('nameInput').value.trim();
            if (!name) {
                alert('Please enter a name first');
                return;
            }

            const url = `${window.location.origin}${window.location.pathname}?name=${encodeURIComponent(name)}`;
            
            if (navigator.share) {
                try {
                    await navigator.share({
                        title: 'Diwali Wishes',
                       text: `Hello ${name}! Wish you a happy and prosperous Diwali!`,
                        url: url
                    });
                } catch (err) {
                    if (err.name !== 'AbortError') {
                        handleCopy();
                    }
                }
            } else {
                handleCopy();
            }
        }

        async function handleCopy() {
            const name = document.getElementById('nameInput').value.trim();
            if (!name) {
                alert('Please enter a name first');
                return;
            }

            const url = `${window.location.origin}${window.location.pathname}?name=${encodeURIComponent(name)}`;
            
            try {
                await navigator.clipboard.writeText(url);
                alert('Link copied to clipboard!');
            } catch (err) {
                alert('Failed to copy link. Please try again.');
            }
        }

        updateNameDisplay();
    </script>
</body>
</html>
